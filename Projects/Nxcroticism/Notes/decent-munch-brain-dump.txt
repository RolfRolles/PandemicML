Brain dump:

Maximal munch generates code for an expression tree:

* Pattern-match over the current expression tree.  Select the largest and most
  specialized patterns first, leaving parts of the tree generically specified 
  by instance variables.
* * Recursively munch the instance-variable subexpressions using the same 
    procedure. In doing so, we accumulate a trail of instructions in a global 
    variable, and return a register corresponding to where that instruction 
    deposits its value.
* Now, with the registers for the subexpressions in hand, plug them into the
  code generated for the expression that was matched.  Deposit that instruction
  in the global variable, and return the register so that the caller knows 
  where the value it's expecting is located.
  
That does not work for our situation.  Because our instruction set is so 
poorly-defined, we do not know a priori what an optimal (or even, a working)
gadget assignment for a given expression or statement might be.

So, instead, we generate every possible gadget arrangement that might fit
the bill, and let later phases sort out which ones actually work.

For every subexpression, we return a list [(reg,instrs)]:

* reg = return location for gadget
* instrs = list of gadgets
  
We do this recursively.  So for a statement like StoreMem(eaddr,eval,size), we:
* Get the eaddr list recursively
* Get the eval list recursively
* Output = []
* For each (areg,ainstrs):
* * For each (vreg,vinstrs):
* * * If (areg,vreg,size) is a valid gadget
* * * * Output := Unordered(

type gadget = int

type schedulable = 
(* One gadget *)
| Atom of gadget
(* Do both, but not in a fixed order *)
| Unordered of schedulable * schedulable
(* Do two actions in a row *)
| Seq of schedulable * schedulable

So the thing that is confusing me at the moment is the distinction between the
gadget arrangement and gadget assignment phases.  I am not entirely sure what
the arrangement phase does, not what the assignment phase does.  Let's read the
paper and take notes on it.

4.3 Gadget Arrangement

Describes why standard compiler techniques aren't entirely applicable.

4.3.1  Q's Language:  QooL

Describes the BNF grammar for QooL.

4.3.2  Arrangements

Compilers perform instruction selection to map IR statements and their 
subexpressions into lists of instructions.  

"We specify each combination of gadgets using a _gadget arrangement_.  A gadget
arrangement is a tree in which the vertices represent gadget types, and an edge
labeled _type_ from a to b means that the output of gadget a is used for the 
_type_ input in gadget b." 

Describes Maximal Munch, and why it fails in our case.  Instead, we use "every
munch" to describe every possible way that gadget types might be arranged in 
order to perform a computation.

4.3.3  Munch Rules

Describes every munch and the need for alternative gadget read/write gadgets.

4.4 Gadget Assignment

"The goal is to assign gadgets found during discovery to the vertices of 
arrangements, and see if the assignment is compatible."

"Gadget assignments need a schedule, since the gadgets must execute in some
order.  Selecting a valid schedule is not always easy because there are data
dependencies between different gadgets.  For instance, if the gadget at T2
clobbers the Value register in Fig. 3, the gadget at T3 will not receive the
correct input.  To resolve such dependencies between gadgets, a gadget 
assignment and corresponding schedule must satisfy these properties:

Matching Registers.  Whenever the result of gadget a is used as input type to
gadget b, then the two registers should match, i.e. OutReg(a) = InReg(b,type).

No Register Clobbering.  If the output of gadget a is used by gadget b, then 
a's output register should not be clobbered by any gadget scheduled between
a and b.  For example, for the schedule shown in Fig. 3, the LoadConstG 
operation during T2 should not clobber the result of the previous LoadConstG
that happened during T1."

Me again:

So, it sounds like the following is the case.  A "gadget arrangement" is akin
to a "class", whereas the "gadget assignment" phase is akin to an "object".

The gadget arrangement phase is not concerned with whether the gadgets exist.
It simply creates a tree describing every possible way to perform a given
computation.  It is the role of the gadget assignment phase to prune the tree
of any unsatisfiable subtrees, and to replace the remaining gadgets with their
concrete reifications.

So.  Although I tend not to try to improve upon a design before I've even 
implemented it, in this case I think that there are some improvements that I
can make.

It seems wasteful to build up an entire tree without doing any pruning during
its construction.  Why should we not query the results of the discovery phase
in building the tree?

Taking the example given in the paper:

let munch = function
| StoreMem(e1,e2,t) ->
  let e1l = munch e1 in
  let e2l = munch e2 in
  (* For each e1g, e2g in the Cartesian product of e1l and e2l do: *)
  add_output (StoreMemG(addr = e1g, value = e2g, typ = t))

Why should we not filter these ahead of time?  For example:

let filter_cartesian f ll rl =
  let rec aux list = function
  | l::ls ->
    let rec aux2 list = function
    | [] -> aux list ls
    | r::rs -> aux2 (f list l r) rs
    in aux2 list rl
  | [] -> list
  in
  aux [] ll

let f_filter vvset = 
 (fun list (lreg,lcomp) (rreg,rcomp) -> 
    if VarVarSet.mem (lreg,rreg) vvset
      then ???::list 
      else list) 

let munch = function
| StoreMem(e1,e2,t) ->
  filter_cartesian 
   (f_filter (Global.get_store_register_pairs t))
   (munch e1)
   (munch e2)

This type of thing will prune the tree while building it.

OK, so let's move on to some more subtle aspects of this whole endeavor.  We're
going to have to make liberal use of register transfer instructions.  If we
assume that registers are always getting clobbered, we're going to need to be 
shuffling registers around all the time.

type schedulable = 
(* One gadget *)
| Atom of gadget
(* Do both, but not in a fixed order *)
| Unordered of schedulable * schedulable
(* Do two actions in a row *)
| Seq of schedulable * schedulable

(* Return the clobbered registers from a schedulable tree *)
let rec clobbered = function
| Atom(g) -> get_clobbered g
| Unordered(s1,s2) ->
| Seq(s1,s2) ->

type expr = 
| LoadMem of expr * size
| BinOp of expr * IR.binop * expr
| Const of int32 * size

type stmt =
| StoreMem of expr * expr * type
| Assign of var * exp
| CallExternal of func * exp list
| Syscall

let rec munchExpr = function
| LoadMem(ae,s) ->
  let ael = munchExpr ae in
  let lmg = Cache.load_mem_gadgets size in
   
| BinOp(le,o,re) ->
  let lel = munchExpr le and rel = munchExpr re in
  let bog = Cache.binop_gadgets size o in
  
  
  
| Const(i32,size) ->
  let lcg = Cache.load_const_gadgets size in
  let lcg = 
    List.fold_left 
     (fun (set,list) (outreg,g) -> 
        let set = VarSet.add outreg set in
        (set,???))
      (VarSet.empty,[])
      lcg 
  in
  let mg = Cache.move_reg_gadgets size in
  (* Now we want to know where we can move the constants to, and which 
     registers are clobbered as a result of doing so.  So for each 
     register location src into which we can load a constant, we check
     all dst = src copies, and we include those as candidates. 
     
     Let's get serious:  what are we doing about register clobbering?
     
     Each gadget has an associated triplet of VarSets that describe 
     which registers are clobbered by the gadget.  Call that tc, for
     triplet clobbered.
     
     What we are really concerned with are entities like
     (tc,[gadgets]).  Or is that, (tc,outreg,[gadgets])?
     
     So we return that.
     *)
  
  
  
  

let rec munchStmt = function
| StoreMem(ae,ve,s) ->
| Assign(v,e) ->
| CallExternal(_,_) -> failwith "munchStmt: call unsupported"
| Syscall -> failwith "munchStmt: call unsupported"